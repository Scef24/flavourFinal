-- Script was generated by Devart dbForge Studio for MySQL, Version 6.0.128.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 12/16/2023 9:55:20 AM
-- Server version: 5.5.5-10.4.28-MariaDB
-- Client version: 4.1

USE flavour;

CREATE TABLE role (
  role_id int(11) NOT NULL AUTO_INCREMENT,
  role varchar(255) DEFAULT '''''''NULL''''''',
  PRIMARY KEY (role_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 3
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci
ROW_FORMAT = DYNAMIC;

CREATE TABLE status (
  status_id int(11) NOT NULL AUTO_INCREMENT,
  status varchar(255) DEFAULT '''''''NULL''''''',
  PRIMARY KEY (status_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 3
AVG_ROW_LENGTH = 8192
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci
ROW_FORMAT = DYNAMIC;

CREATE TABLE user (
  user_id int(11) NOT NULL AUTO_INCREMENT,
  username varchar(255) DEFAULT '''NULL''',
  fname varchar(50) DEFAULT '''''''''''''''NULL''''''''''''''',
  lname varchar(50) DEFAULT '''''''''''''''NULL''''''''''''''',
  password varchar(255) DEFAULT '''''''NULL''''''',
  securityQuestion varchar(255) NOT NULL DEFAULT '''''''''''''''NULL''''''''''''''',
  securityAnswer varchar(255) NOT NULL DEFAULT '''''''NULL''''''',
  PRIMARY KEY (user_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 65
AVG_ROW_LENGTH = 1638
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci
ROW_FORMAT = DYNAMIC;

CREATE TABLE role_manager (
  role_manager_id int(11) NOT NULL AUTO_INCREMENT,
  user_id int(11) DEFAULT NULL,
  role_id int(11) DEFAULT NULL,
  status_id int(11) DEFAULT NULL,
  PRIMARY KEY (role_manager_id),
  CONSTRAINT FK_role_manager_role_role_id FOREIGN KEY (role_id)
  REFERENCES role (role_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_role_manager_status_status_id FOREIGN KEY (status_id)
  REFERENCES status (status_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_role_manager_user_user_id FOREIGN KEY (user_id)
  REFERENCES user (user_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
AUTO_INCREMENT = 65
AVG_ROW_LENGTH = 1638
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci
ROW_FORMAT = DYNAMIC;

DELIMITER $$

CREATE PROCEDURE auth_check (IN _account_id varchar(255))
SQL SECURITY INVOKER
BEGIN
  SELECT
    u.user_id,
    u.username,
    u.fname,
    u.lname,
    u.password,
    r.role,
    s.status
  FROM flavour.role_manager rm
    JOIN flavour.user u
      ON rm.user_id = u.user_id
    JOIN flavour.role r
      ON rm.role_id = r.role_id
    JOIN flavour.status s
      ON rm.status_id = s.status_id
  WHERE u.username = _account_id;


END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE change_role (IN _user_id int(11))
BEGIN

  UPDATE role_manager
  SET role_id =
    CASE
      WHEN role_id = '2' THEN '1'
      WHEN role_id = '1' THEN '2' ELSE role_id
    END
  WHERE user_id = _user_id;

END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE change_status (IN _user_id int(11))
BEGIN

  UPDATE role_manager
  SET status_id =
    CASE
      WHEN status_id = '2' THEN '1'
      WHEN status_id = '1' THEN '2' ELSE status_id
    END
  WHERE user_id = _user_id;

END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE check_security_answer (IN p_username varchar(255),
IN p_security_answer varchar(255),
OUT p_result int)
BEGIN
  DECLARE v_correct_answer varchar(255);

  -- Assuming you have a 'user' table with columns 'username', 'securityQuestion', and 'securityAnswer'
  SELECT
    securityAnswer INTO v_correct_answer
  FROM user
  WHERE username = p_username AND securityQuestion IS NOT NULL;

  IF v_correct_answer IS NOT NULL AND v_correct_answer = p_security_answer THEN
    SET p_result = 1; -- Security answer is correct
  ELSE
    SET p_result = 0; -- Security answer is incorrect or username not found
  END IF;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE cred_check (IN _user_id int(11))
BEGIN

  SELECT
    *
  FROM user
  WHERE user_id = _user_id;

END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE get_all_admins ()
BEGIN
  SELECT
    u.user_id,
    u.username,
    u.fname,
    u.lname,
    u.password,
    r.role
  FROM flavour.role_manager rm
    JOIN flavour.user u
      ON rm.user_id = u.user_id
    JOIN flavour.role r
      ON rm.role_id = r.role_id
  WHERE r.role = 'admin'
  ORDER BY u.lname, u.fname;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE get_all_users ()
BEGIN
  SELECT
    u.user_id,
    u.username,
    u.fname,
    u.lname,
    u.password,
    r.role,
    s.status
  FROM flavour.role_manager rm
    JOIN flavour.user u
      ON rm.user_id = u.user_id
    JOIN flavour.role r
      ON rm.role_id = r.role_id
    JOIN flavour.status s
      ON rm.status_id = s.status_id
  WHERE r.role = 'guest'
  ORDER BY u.lname, u.fname;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE get_user_data (IN `p_username` varchar(255), OUT `p_user_id` int, OUT `p_username_result` varchar(255), OUT `p_security_question` varchar(255), OUT `p_security_answer` varchar(255))
BEGIN
  SELECT
    user_id,
    username,
    securityQuestion,
    securityAnswer INTO p_user_id, p_username_result, p_security_question, p_security_answer
  FROM user
  WHERE username = p_username;
END
$$

CREATE PROCEDURE insert_user (IN _account_id varchar(255),
IN _first_name varchar(50),
IN _last_name varchar(50),
IN _password varchar(60),
IN _securityQuestion varchar(255),
IN _securityAnswer varchar(255))
SQL SECURITY INVOKER
BEGIN
  DECLARE isEx int;
  SELECT
    COUNT(*) INTO isEx
  FROM user
  WHERE username = _account_id OR
  (fname = _first_name AND lname = _last_name);

  IF isEx = 0 THEN
    INSERT INTO user (username, fname, lname, password, securityQuestion, securityAnswer)
      VALUES (_account_id, _first_name, _last_name, _password, _securityQuestion, _securityAnswer);

    SET @user_id = LAST_INSERT_ID();

    INSERT INTO role_manager (user_id, role_id, status_id)
      VALUES (@user_id, 2, 1);


  END IF;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE register_check (IN _account_id varchar(255),
IN _first_name varchar(50),
IN _last_name varchar(50))
BEGIN

  SELECT
    *
  FROM user
  WHERE username = _account_id OR (fname = _first_name AND lname = _last_name);

END
$$

CREATE PROCEDURE reset_password (IN p_username varchar(255), IN p_security_question varchar(255), IN p_security_answer varchar(255), IN p_new_password varchar(255), IN p_confirm_new_password varchar(255), OUT p_result int)
SQL SECURITY INVOKER
BEGIN
  DECLARE correct_security_question varchar(255);
  DECLARE correct_security_answer varchar(255);

  -- Initialize result
  SET p_result = 0;

  -- Retrieve user data
  SELECT
    securityQuestion,
    securityAnswer INTO correct_security_question, correct_security_answer
  FROM user
  WHERE username = p_username;

  -- Check if the user exists
  IF correct_security_question IS NOT NULL AND correct_security_answer IS NOT NULL THEN
    -- Check security question and answer
    IF p_security_question = correct_security_question AND p_security_answer = correct_security_answer THEN
      -- Check if new password and confirm password match
      IF p_new_password = p_confirm_new_password THEN
        -- Update password
        UPDATE user
        SET password = SHA2(p_new_password, 256) -- Ensure to use a secure hashing algorithm
        WHERE username = p_username;

        -- Set result to success
        SET p_result = 1;
      ELSE
        -- New passwords do not match
        SET p_result = - 2;
      END IF;
    ELSE
      -- Incorrect security question or answer
      SET p_result = - 1;
    END IF;
  ELSE
    -- Username not found
    SET p_result = 0;
  END IF;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE search_admins (IN search_name varchar(255))
BEGIN
  SELECT
    u.user_id,
    u.username,
    u.fname,
    u.lname,
    u.password,
    r.role
  FROM flavour.role_manager rm
    JOIN flavour.user u
      ON rm.user_id = u.user_id
    JOIN flavour.role r
      ON rm.role_id = r.role_id
  WHERE (search_name IS NULL OR CONCAT(u.fname, ' ', u.lname) LIKE CONCAT('%', search_name, '%'))
  AND r.role = 'admin'
  ORDER BY u.lname, u.fname;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE search_users (IN search_name varchar(255))
BEGIN
  SELECT
    u.user_id,
    u.username,
    u.fname,
    u.lname,
    u.password,
    r.role
  FROM flavour.role_manager rm
    JOIN flavour.user u
      ON rm.user_id = u.user_id
    JOIN flavour.role r
      ON rm.role_id = r.role_id
  WHERE (search_name IS NULL OR CONCAT(u.fname, ' ', u.lname) LIKE CONCAT('%', search_name, '%'))
  AND r.role = 'guest'
  ORDER BY u.lname, u.fname;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_account_id (IN _user_id int(11), IN _account_id int(11))
BEGIN

  DECLARE isEx int;
  SELECT
    COUNT(*) INTO isEx
  FROM user
  WHERE username = _account_id;

  IF isEx = 0 THEN
    UPDATE user
    SET username = _account_id
    WHERE user_id = _user_id;
  END IF;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_name (IN _user_id int(11), IN _first_name varchar(50), IN _last_name varchar(50))
BEGIN

  DECLARE isEx int;
  SELECT
    COUNT(*) INTO isEx
  FROM user
  WHERE fname = _first_name AND lname = _last_name;

  IF isEx = 0 THEN
    UPDATE user
    SET fname = _first_name,
        lname = _last_name
    WHERE user_id = _user_id;
  END IF;
END
$$

CREATE DEFINER = 'root'@'localhost'
PROCEDURE update_password (IN _username varchar(255),
IN _password varchar(60),
IN _securityQuestion varchar(255),
IN _securityAnswer varchar(255))
BEGIN
  DECLARE userExists int;

  -- Check if the user exists
  SELECT
    COUNT(*) INTO userExists
  FROM user
  WHERE username = _username;

  -- If the user exists, update password and security information
  IF userExists > 0 THEN
    UPDATE user
    SET password = _password,
        securityQuestion = _securityQuestion,
        securityAnswer = _securityAnswer
    WHERE username = _username;

    SELECT
      'Password and security information updated successfully' AS message;
  ELSE
    SELECT
      'User not found' AS message;
  END IF;
END
$$

DELIMITER ;